####################################################################################################
#                       TMUX COMMAND SHORTCUTS                                                     #
###################################################################################################
#  bind is short for bind-key
# tmux source-file ~/.tmux.conf #is used to source the file

# tmux source-file ~/.tmux.conf is used to source the file
# change prefix key to C-a, easier to type, same to "screen"
unbind C-b
set -g prefix C-f

# split windows to panes using | and - while keeping the current path
bind | split-window -h -c "#{pane_current_path}"
bind - split-window -c "#{pane_current_path}"
bind W command-prompt "new-window -n %1 -c '#{pane_current_path}'"
bind S command-prompt "new-session -s %1 -c '#{pane_current_path}'"
bind '/' command-prompt -p "session abbr:" "run 'tmux switch -t $(tmux ls -F \"##{session_created}:##{session_name}\" | sort -n | grep \':%%\' | head -n 1 | cut -d \':\' -f 2)'"
bind-key -n C-S-Up select-window -t -1
bind-key -n C-S-Left swap-window -t -1
bind-key -n C-S-Right swap-window -t +1\; select-window -t +1

unbind '"'
unbind %

bind g new-window -n "gh-dash" "gh dash"

# Easy config reloads
unbind r
bind r source-file ~/.tmux.conf \;

# Enable killing session
bind X confirm-before "kill-session -t ''"

# Switch panes using Alt-arrow without prefix
bind -n M-left select-pane -L
bind -n M-Right select-pane -R
bind -n M-Up select-pane -U
bind -n M-Down select-pane -D

# Enable mouse control (clickable windows, panes, resizable panes)
set -g mouse on # for tmux 2.1 and above
# set -g mouse-select-window on
set -g allow-rename off

# Prompted join-pane
bind-key j command-prompt -p "join pane from: " "join-pane -h -s '%%'"

# TODO: When there are multiple pane the choose the last window as the last pane
# I really don't need this because I have shift L for last client
# bind-key l if-shell 'test $(tmux list-panes | wc -l) -gt 1' 'last-pane' 'last-window'

# search man enable search man page
bind-key b set-option status
# bind-key / command-prompt "split-window 'exec man %%'"

set-option -s focus-events on
set-option -s extended-keys on
set-option -s escape-time 0

####################################################################################################
#                       TMUX COPY PASTING                                                          #
####################################################################################################

# set-window-option -g mode-keys vi
# Use vim keybindings in copy mode
setw -g mode-keys vi

# this line below disable the copying to the system buffer
# set -s set-clipboard off

# Define a shell command to get the operating system type
set -g @os-type "#{shell 'uname | grep -iq \"darwin\" && echo macos || echo linux'}"

# NOTE you can use "+y to copy inside vim
# if you are on MacOS you should enable clipboard
# Go iTem2 -> preference->general ->selection -> check "Applications in terminal may access clipboard"
bind -T copy-mode-vi v send-keys -X begin-selection
bind P paste-buffer
bind -T copy-mode-vi y send-keys -X rectangle-toggle

# Use the @os-type variable in your bind command
bind -T copy-mode-vi y send-keys \
	-X copy-pipe-and-cancel "#{@os-type eq 'macos' ? 'pbcopy' : 'xclip -selection clipboard'}"

# Use the @os-type variable in your bind command
bind -T copy-mode-vi MouseDragEnd1Pane send-keys \
	-X copy-pipe-and-cancel "#{@os-type eq 'macos' ? 'pbcopy' : 'xclip -selection clipboard'}"

bind < resize-pane -L 5
bind > resize-pane -R 5
bind ^ resize-pane -U 5
bind v resize-pane -D 5

# Prompted join-pane
bind-key j command-prompt -p "join pane from: " "join-pane -h -s '%%'"

####################################################################################################
#                       DESIGN CHANGES                                                             #
###################################################################################################

# loud or quiet ?
set -g visual-activity off
set -g visual-bell off
set -g visual-silence off
set -g monitor-activity off
set -g bell-action none
#
# modes
setw -g clock-mode-colour colour5
setw -g mode-style 'fg=colour1 bg=colour18 bold'

## panes
set -g pane-border-style 'fg=colour19 bg=colour0'
set -g pane-active-border-style 'bg=colour0 fg=colour9'

## statusbar
set -g status-position top

set -g @pomodoro_on " #[fg=#ff5555]üçÖ "
set -g @pomodoro_toggle 'p' # Start/pause a Pomodoro/break
set -g @pomodoro_cancel 'P' # Cancel the current session
set -g @pomodoro_skip 'k'   # Skip a Pomodoro/break

set -g @pomodoro_mins 30            # The duration of the Pomodoro
set -g @pomodoro_break_mins 5       # The duration of the break after the Pomodoro completes
set -g @pomodoro_intervals 2        # The number of intervals before a longer break is started
set -g @pomodoro_long_break_mins 15 # The duration of the long break
set -g @pomodoro_repeat 'on'        # Automatically repeat the Pomodoros?
set -g @pomodoro_start 'on'         # Automatically repeat the Pomodoros?

set -g @pomodoro_complete "#[fg=#50fa7b] ‚úîÔ∏é"               # The formatted output when the break is running
set -g @pomodoro_pause "#[fg=#f1fa8c] ‚è∏Ô∏é"                  # The formatted output when the Pomodoro/break is paused
set -g @pomodoro_prompt_break " ‚è≤Ô∏é break?"    # The formatted output when waiting to start a break
set -g @pomodoro_prompt_pomodoro " ‚è±Ô∏é start?" # The formatted output when waiting to start a Pomodoro

set -g @pomodoro_menu_position "R"  # The location of the menu relative to the screen
set -g @pomodoro_sound 'on'         # Sound for desktop notifications (Run `ls /System/Library/Sounds` for a list of sounds to use on Mac)
set -g @pomodoro_notifications 'on' # Enable desktop notifications from your terminal
set -g @pomodoro_granularity 'off'  # Enables MM:SS (ex: 00:10) format instead of the default (ex: 1m)

## Vim-Airline for tmux
set -g status on

set -g @dracula-show-powerline true

# it can accept `session`, `smiley`, `window`, or any character.
set -g @dracula-show-left-icon session

# available plugins: battery, cpu-usage, git, gpu-usage, ram-usage, network, network-bandwidth, network-ping, weather, time
set -g @dracula-plugins "git cpu-usage time custom:pomodoro.sh "

# default is ‚úì. Avoid using non unicode characters that bash uses like $, * and !
set -g @dracula-git-show-current-symbol ‚úì

# for left
set -g @dracula-show-left-sep '‚ñ∂'

# for right symbol (can set any symbol you like as seperator)
set -g @dracula-show-right-sep '‚óÄ'

set -g @pomodoro_granularity 'on'

set -g status-interval 1 # might create diuplication  Refresh the status line every second need

# continuum setup
set -g @continuum-save-interval '5'
set -g @continuum-restore 'on'

####################################################################################################
#                       TMP plugins                                                                #
###################################################################################################

# install dracula for tmux
set -g @plugin 'dracula/tmux'
set -g @plugin 'omerxx/tmux-sessionx'

# List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'

# install pomodoro-plus
set -g @plugin 'olimorris/tmux-pomodoro-plus'

# install tmux resurrect for saving and restoring session
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'

set -g @plugin 'christoomey/vim-tmux-navigator'

# Other examples:
# set -g @plugin 'github_username/plugin_name'
# set -g @plugin 'github_username/plugin_name#branch'
# set -g @plugin 'git@github.com:user/plugin'
# set -g @plugin 'git@bitbucket.com:user/plugin'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
set -g status-right "#{E:@catppuccin_status_pomodoro_plus}"
run '~/.tmux/plugins/tpm/tpm'
